from datetime import datetime

from aiogram.types import Message

from core.utils.dbconnect import Request
from core.keyboards.inline import first_reg_keyboard, add_player_keyboard, all_players_keyboard, yes_no_keyboard


votes = dict()


async def get_start(message: Message, request: Request):
    if message.chat.type == 'private':
        await message.answer(f"–°–∞–ª–∞–º, {message.from_user.first_name}!"
                             f"\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –Ω–∞–¥–æ –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞ –≤ –≥—Ä—É–ø–ø—É –¥–æ–±–∞–≤–∏—Ç—å")

    elif message.chat.type == 'group' or message.chat.type == 'supergroup':
        if not await request.check_group(message.chat.id, message.chat.title):
            await request.add_group(
                group_chat_id=message.chat.id,
                group_name=message.chat.title
            )
            await message.answer(f"–ö—Ä–∞—Å–∞–≤—á–∏–∫–∏,—á–µ. –î–æ–±–∞–≤–∏–ª–∏ –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –≤ –≥—Ä—É–ø–ø—É? "
                                 f"–ó–Ω–∞—á–∏—Ç –Ω–∞–¥–æ –∑–∞—Ä–µ–≥–∞—Ç—å –≤—Å–µ—Ö –∫—Ç–æ –±—É–¥–µ—Ç –∏–≥—Ä–∞—Ç—å.", reply_markup=first_reg_keyboard())
        else:
            votes[message.chat.id] = {}
            await message.answer(
                f"–ö—Ç–æ —Å–µ–≥–æ–¥–Ω—è({datetime.now().date().strftime('%d.%m.%Y')}) —á–µ–º–ø–∏–æ–Ω?"
                f"\n–ö—Ä–æ–º–µ —Å–∞–º–æ–≥–æ —á–µ–º–ø–∏–æ–Ω–∞, –º–∏–Ω–∏–º—É–º –¥–≤–æ–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –Ω–µ–≥–æ.",
                reply_markup=await all_players_keyboard(request, message.chat.id)
            )


async def add_new_player(message: Message):
    await message.answer(
        f"–•–æ—Ä–æ—à–æ. –ö–Ω–æ–ø–∫—É –¥–æ–ª–∂–µ–Ω –Ω–∞–∂–∞—Ç—å —Ç–æ—Ç, –∫–æ–≥–æ –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å.",
        reply_markup=add_player_keyboard()
    )


async def get_stats_str(request: Request, query_result: dict, answer: str) -> str:
    counter = 1
    for user_id, number in query_result.items():
        player = await request.get_user(user_id)
        answer += f"\n{counter}. {player[0]['first_name']}: <b>{number}</b>"
        counter += 1
    return answer


async def turn_num_to_cups(number: int) -> str:
    cups = ""
    for i in range(1, number + 1):
        cups += "üèÜ"
    return cups


async def get_stats_in_cups(request: Request, query_result: dict, answer: str) -> str:
    counter = 1
    for user_id, number in query_result.items():
        player = await request.get_user(user_id)
        answer += f"\n{counter}. {player[0]['first_name']}: <b>{await turn_num_to_cups(number)}</b>"
        counter += 1
    return answer


async def show_all_stats(message: Message, request: Request):
    all_stats = await request.get_all_stats(message.chat.id)
    answer = await get_stats_str(request, all_stats, answer=f"–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n")
    await message.answer(answer)


async def show_all_stats_in_cups(message: Message, request: Request):
    all_stats = await request.get_all_stats(message.chat.id)
    answer = await get_stats_in_cups(request, all_stats, answer=f"–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n")
    await message.answer(answer)


async def show_this_year_stats(message: Message, request: Request):
    this_year = await request.get_stats_current_year(message.chat.id)
    answer = await get_stats_str(request, this_year, answer=f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞:\n")
    await message.answer(answer)


async def cancel_last_record(message: Message, request: Request):
    if not await request.get_any_record(message.chat.id):
        await message.answer(f"–ó–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –Ω–µ—Ç.", alert=True)
    else:
        await message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã?", reply_markup=yes_no_keyboard())
